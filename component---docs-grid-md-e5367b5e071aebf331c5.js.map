{"version":3,"sources":["webpack:///./docs/grid.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","style","isMDXComponent"],"mappings":"qfAMO,IAAMA,EAAe,Q,8LAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,QADR,QAGA,iBAAQ,CACN,GAAM,YADR,YAGA,wJACA,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,w3FAwGL,iBAAQ,CACN,GAAM,WADR,WAGA,yBACF,yBACE,sBACE,kBAAIC,MAAO,CACL,UAAa,SADnB,QAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,QAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,iBAKJ,yBACE,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,qCAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,6EAGA,kBAAIA,MAAO,CACL,UAAa,SAEjB,kEACA,sBACA,gGAEE,uBAFF,mDAGA,sBACA,sEACA,sBACA,2FACA,wBAGJ,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,qCAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,iDAGA,kBAAIA,MAAO,CACL,UAAa,SAEjB,iDACE,uBADF,sEAEA,wBAGJ,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,8BAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,8BAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,yCAIF,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,8BAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,6CAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,2DAIF,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,8BAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,sBAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,oBAIF,sBACE,kBAAIA,MAAO,CACL,UAAa,SACZ,8BAEP,kBAAIA,MAAO,CACL,UAAa,SADnB,+BAGA,kBAAIA,MAAO,CACL,UAAa,SADnB,8DA1NG,IAgOL,iBAAQ,CACN,GAAM,cADR,cAGA,sBACE,kBAAID,WAAW,MAAf,WAAgC,mBAAGA,WAAW,MAAS,CACnD,KAAQ,qHADoB,UAAhC,YAGA,kBAAIA,WAAW,MAAf,WAAgC,mBAAGA,WAAW,MAAS,CACnD,KAAQ,0DADoB,aAAhC,iC,4LAQNJ,EAAWM,gBAAiB","file":"component---docs-grid-md-e5367b5e071aebf331c5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/nrisbakk/Projects/newTC/totalcross-page/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"grid\"\n    }}>{`Grid`}</h1>\n    <h3 {...{\n      \"id\": \"overview\"\n    }}>{`Overview`}</h3>\n    <p>{`Grid is a control that contains a list organized by columns, where each column can receive an individual size and an alignment.`}</p>\n    <h3 {...{\n      \"id\": \"source-code\"\n    }}>{`Source Code`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`import totalcross.sys.Settings;\nimport totalcross.ui.Button;\nimport totalcross.ui.Grid;\nimport totalcross.ui.MainWindow;\nimport totalcross.ui.dialog.MessageBox;\nimport totalcross.util.UnitsConverter;\nimport java.util.ArrayList;\n\npublic class GridSample extends MainWindow {\n\n    private final int H = 225;\n    private ArrayList<User> users = new ArrayList<>();\n    private Grid grid;\n    private Button loadButton;\n    private int GAP = UnitsConverter.toPixels(DP + 8);\n\n    public GridSample(){\n        setUIStyle(Settings.Material);\n    }\n\n    @Override\n    public void initUI() {\n        String[] gridCaptions = { \"Name\", \"Phone\", \"Email\" };\n        int gridWidths[] = { -35, -35, -30 };\n        int gridAligns[] = { LEFT, LEFT, LEFT };\n\n        grid = new Grid(gridCaptions, gridWidths, gridAligns, false);\n        grid.verticalLineStyle = Grid.VERT_LINE;\n\n        loadButton = new Button(\"Load\");\n\n        add(grid, LEFT + GAP, TOP + GAP, FILL - GAP, FILL - GAP * 9);\n        add(loadButton, LEFT + GAP, BOTTOM - GAP, FILL - GAP, PREFERRED);\n\n        loadButton.addPressListener( e -> {\n\n            for (int i = 0; i < 5; i++) {\n                users.add(new User(\"Joao \",\"99999999\",\"joao@j.com\",\"12345678\"));\n            }\n\n            if (users.size() > 0) {\n                String items[][] = new String[users.size()][3];\n                for (int i = 0; i < users.size(); i++) {\n                    User user = users.get(i);\n                    items[i] = new String[] { user.getName(), user.getPhone(), user.getMail() };\n                }\n                grid.setItems(items);\n            } else {\n                MessageBox mb = new MessageBox(\"Message\", \"No registered users.\", new String[] { \"Close\" });\n                mb.popup();\n            }\n        });\n    }\n\n    public class User {\n\n        private String name;\n        private String phone;\n        private String mail;\n        private String password;\n\n        public User() {\n\n        }\n\n        public User(String name, String phone, String mail, String password) {\n            this.name = name;\n            this.phone = phone;\n            this.mail = mail;\n            this.password = password;\n        }\n\n        public String getName() {\n            return name;\n        }\n        public void setName(String name) {\n            this.name = name;\n        }\n        public String getPhone() {\n            return phone;\n        }\n        public void setPhone(String phone) {\n            this.phone = phone;\n        }\n        public String getMail() {\n            return mail;\n        }\n        public void setMail(String mail) {\n            this.mail = mail;\n        }\n        public String getPassword() {\n            return password;\n        }\n        public void setPassword(String password) {\n            this.password = password;\n        }\n\n    }\n}\n\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"methods\"\n    }}>{`Methods`}</h3>\n    <table>\n  <thead>\n    <tr>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Type</th>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Name</th>\n      <th style={{\n            \"textAlign\": \"left\"\n          }}>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Constructor</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Grid(String[] captions, int[] widths, int[] aligns, boolean checkEnabled)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>\n        <p>Captions for the columns. Cannot be null;</p>\n        <p></p>\n        <p>Widths of the columns. If the total width is less than the grid&apos;s\n          width,\n          <br />the last column will fill until the grid width;</p>\n        <p></p>\n        <p>Alignment of information on the given column;</p>\n        <p></p>\n        <p>checkEnabled is True if you want the multi-selection check column;</p>\n        <p></p>\n        </td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Constructor</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Grid(String[] captions, boolean checkEnabled)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>\n        <p>Captions for the columns;\n          <br />checkEnabled is True if you want the multi-selection check column;</p>\n        <p></p>\n      </td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Void</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>setItems(String[][] items)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Sets the grid items to be displayed.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Void</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>setDataSource(DataSource ds, int nrItems)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Sets the data source of this grid to be the given one.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Void</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>add(String[] item)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Add a new line.</td>\n    </tr>\n    <tr>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}><b>Void</b>\n      </td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>add(String[] item, int row)</td>\n      <td style={{\n            \"textAlign\": \"left\"\n          }}>Add a new line at the given index position of the grid.</td>\n    </tr>\n  </tbody>\n    </table>â€Œ\n    <h3 {...{\n      \"id\": \"references\"\n    }}>{`References`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`See the `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/TotalCross/TCSample/blob/master/src/main/java/totalcross/sample/components/ui/GridSample.java\"\n        }}>{`github`}</a>{` sample.`}</li>\n      <li parentName=\"ul\">{`See the `}<a parentName=\"li\" {...{\n          \"href\": \"https://rs.totalcross.com/doc/totalcross/ui/Grid.html\"\n        }}>{`Java Docs`}</a>{` for more information.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}